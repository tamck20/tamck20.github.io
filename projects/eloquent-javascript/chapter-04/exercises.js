////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step = start < end ? 1: -1) {
  let array = [];

  if (step > 0) {
    for (let i = start; i <= end; i += step) array.push(i);
  } else if(start === end){
    return [];
  }else {
    for (let i = start; i >= end; i += step) array.push(i);
  }
  return array;
}



////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(arr) {
  if(!arr.length){
    return 0;
  }
  return arr[0] + sum(arr.slice(1));
}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(arr) {
  let newArr = [];
  for (let i = arr.length - 1; i >= 0; i--){
    newArr.push(arr[i]);
  }
return newArr;
}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(arr) {
  for(let i = 0; i < arr.length; i++){
    arr.splice(i, 0, arr.pop());
  }
return arr;
}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(arr) {
  let list = null;
  for (let i = arr.length - 1; i >= 0; i--){
    list = {value: arr[i], rest: list};
  }
return list;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list) {
 //convert list to array
  //initialize empty array
  let arr = [];
  //loop through lsit
  //i.rest holds the reference list
  for (let i = list; i; i = i.rest){
    //push the value of i to new array
    arr.push(i.value);
  }
  //return array
  return arr;
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(value, list) {
return {value, rest: list};
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, n) {
if (!list){
  return undefined;
}else if (n === 0){
  return list.value;
}
return nth(list.rest, n - 1);
}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(val1, val2) {
  if(val1 === val2){ // check if values are generally equal
    return true;
  } else if(typeof val1 !== "object" && typeof val2 !== "object" && val1 !== val2){ // check if 2 simple datatypes are not equal
    return false;
  } else if (!val1 && !val2){
    if(val1 !== val2){
      return false;
    }
  } else if (Array.isArray(val1) === true && Array.isArray(val2) === true){ // if both vals are arrays, loop over and check if their values are the same
    for(let i = 0; i < val1.length; i++){
      if (typeof val1[i] === typeof val1[i]){
        return deepEqual(val1[i], val2[i]);
      } 
      return false;
    }
  } else if (typeof val1 === "object" && typeof val2 === "object" && val1 !== null && val2 !== null){ // if both values are objects 
    // create two array of keys
    const arrOfKeys1 = Object.keys(val1); 
    const arrOfKeys2 = Object.keys(val2);
    for(let i = 0; i < arrOfKeys1.length; i++){
      // check if the keys are identical and the values are of the same type
      if (arrOfKeys1[i] === arrOfKeys2[i] && typeof val1[arrOfKeys1[i]] === typeof val2[arrOfKeys2[i]]){
        // recurse passing in the values of the keys as arguments
        return deepEqual(val1[arrOfKeys1[i]], val2[arrOfKeys2[i]]);
      }
      // if they not the same, return false
      return false;
    }
  }
  return true;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};
