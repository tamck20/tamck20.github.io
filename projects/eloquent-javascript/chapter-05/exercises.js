// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function flatten(arrays) {
return arrays.reduce((flatArray, currentArray) => {
  return flatArray.concat(currentArray);
});
}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(value, test, update, body) {
for (value; test(value); value = update(value)){
  body(value);
}
}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every(array, testFunc) {
for (let value of array){
  if (!testFunc(value)){
    return false;
  }
}
return true;
}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection(text) {
  //lines 44 - 50 taken from countBy() and characterSctip()
  let scripts = countBy(text, char => {
    let script = characterScript(char.codePointAt(0));
     return script ? script.name : "none";
  }).filter(({
    name
  }) => name != "none");
  //if the returned scripts array has length of 1, return "ltr"
  if (scripts.length === 1){
    return "ltr";
  }
  //reduce iterates over the count variable which has arrays
  //compares previous array with following array
  return scripts.reduce((scriptTotal, script) => { 
    //compares the count properties
    //returns the greatest one which will be "rtl"
    if (script.count > scriptTotal.count){
      return "rtl";
  }
    return scriptTotal.name;
});
}


// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};
